// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package http_test

import (
	"github.com/jmhobbs/dayz-crimson-zamboni-deathmatch-webhook-proxy/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockScoreboard creates a new instance of MockScoreboard. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScoreboard(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScoreboard {
	mock := &MockScoreboard{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockScoreboard is an autogenerated mock type for the Scoreboard type
type MockScoreboard struct {
	mock.Mock
}

type MockScoreboard_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScoreboard) EXPECT() *MockScoreboard_Expecter {
	return &MockScoreboard_Expecter{mock: &_m.Mock}
}

// AddKill provides a mock function for the type MockScoreboard
func (_mock *MockScoreboard) AddKill(killer string, victim string, weapon string, distance int) {
	_mock.Called(killer, victim, weapon, distance)
	return
}

// MockScoreboard_AddKill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddKill'
type MockScoreboard_AddKill_Call struct {
	*mock.Call
}

// AddKill is a helper method to define mock.On call
//   - killer string
//   - victim string
//   - weapon string
//   - distance int
func (_e *MockScoreboard_Expecter) AddKill(killer interface{}, victim interface{}, weapon interface{}, distance interface{}) *MockScoreboard_AddKill_Call {
	return &MockScoreboard_AddKill_Call{Call: _e.mock.On("AddKill", killer, victim, weapon, distance)}
}

func (_c *MockScoreboard_AddKill_Call) Run(run func(killer string, victim string, weapon string, distance int)) *MockScoreboard_AddKill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockScoreboard_AddKill_Call) Return() *MockScoreboard_AddKill_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockScoreboard_AddKill_Call) RunAndReturn(run func(killer string, victim string, weapon string, distance int)) *MockScoreboard_AddKill_Call {
	_c.Run(run)
	return _c
}

// GetKDRatios provides a mock function for the type MockScoreboard
func (_mock *MockScoreboard) GetKDRatios() map[string]float64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetKDRatios")
	}

	var r0 map[string]float64
	if returnFunc, ok := ret.Get(0).(func() map[string]float64); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}
	return r0
}

// MockScoreboard_GetKDRatios_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKDRatios'
type MockScoreboard_GetKDRatios_Call struct {
	*mock.Call
}

// GetKDRatios is a helper method to define mock.On call
func (_e *MockScoreboard_Expecter) GetKDRatios() *MockScoreboard_GetKDRatios_Call {
	return &MockScoreboard_GetKDRatios_Call{Call: _e.mock.On("GetKDRatios")}
}

func (_c *MockScoreboard_GetKDRatios_Call) Run(run func()) *MockScoreboard_GetKDRatios_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScoreboard_GetKDRatios_Call) Return(stringToFloat64 map[string]float64) *MockScoreboard_GetKDRatios_Call {
	_c.Call.Return(stringToFloat64)
	return _c
}

func (_c *MockScoreboard_GetKDRatios_Call) RunAndReturn(run func() map[string]float64) *MockScoreboard_GetKDRatios_Call {
	_c.Call.Return(run)
	return _c
}

// GetLongestKill provides a mock function for the type MockScoreboard
func (_mock *MockScoreboard) GetLongestKill() *types.Kill {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLongestKill")
	}

	var r0 *types.Kill
	if returnFunc, ok := ret.Get(0).(func() *types.Kill); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Kill)
		}
	}
	return r0
}

// MockScoreboard_GetLongestKill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLongestKill'
type MockScoreboard_GetLongestKill_Call struct {
	*mock.Call
}

// GetLongestKill is a helper method to define mock.On call
func (_e *MockScoreboard_Expecter) GetLongestKill() *MockScoreboard_GetLongestKill_Call {
	return &MockScoreboard_GetLongestKill_Call{Call: _e.mock.On("GetLongestKill")}
}

func (_c *MockScoreboard_GetLongestKill_Call) Run(run func()) *MockScoreboard_GetLongestKill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScoreboard_GetLongestKill_Call) Return(kill *types.Kill) *MockScoreboard_GetLongestKill_Call {
	_c.Call.Return(kill)
	return _c
}

func (_c *MockScoreboard_GetLongestKill_Call) RunAndReturn(run func() *types.Kill) *MockScoreboard_GetLongestKill_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function for the type MockScoreboard
func (_mock *MockScoreboard) Reset() {
	_mock.Called()
	return
}

// MockScoreboard_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockScoreboard_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockScoreboard_Expecter) Reset() *MockScoreboard_Reset_Call {
	return &MockScoreboard_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockScoreboard_Reset_Call) Run(run func()) *MockScoreboard_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScoreboard_Reset_Call) Return() *MockScoreboard_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockScoreboard_Reset_Call) RunAndReturn(run func()) *MockScoreboard_Reset_Call {
	_c.Run(run)
	return _c
}

// NewMockDiscordNotifier creates a new instance of MockDiscordNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDiscordNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDiscordNotifier {
	mock := &MockDiscordNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDiscordNotifier is an autogenerated mock type for the DiscordNotifier type
type MockDiscordNotifier struct {
	mock.Mock
}

type MockDiscordNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDiscordNotifier) EXPECT() *MockDiscordNotifier_Expecter {
	return &MockDiscordNotifier_Expecter{mock: &_m.Mock}
}

// PostMessage provides a mock function for the type MockDiscordNotifier
func (_mock *MockDiscordNotifier) PostMessage(message string) error {
	ret := _mock.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for PostMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDiscordNotifier_PostMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostMessage'
type MockDiscordNotifier_PostMessage_Call struct {
	*mock.Call
}

// PostMessage is a helper method to define mock.On call
//   - message string
func (_e *MockDiscordNotifier_Expecter) PostMessage(message interface{}) *MockDiscordNotifier_PostMessage_Call {
	return &MockDiscordNotifier_PostMessage_Call{Call: _e.mock.On("PostMessage", message)}
}

func (_c *MockDiscordNotifier_PostMessage_Call) Run(run func(message string)) *MockDiscordNotifier_PostMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDiscordNotifier_PostMessage_Call) Return(err error) *MockDiscordNotifier_PostMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDiscordNotifier_PostMessage_Call) RunAndReturn(run func(message string) error) *MockDiscordNotifier_PostMessage_Call {
	_c.Call.Return(run)
	return _c
}
